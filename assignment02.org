#+TITLE: Assignment 2 Solutions
* Exercise 1.9
  Each of the following two procedures defines a method for adding two
  positive integers in terms of the procedures =inc=, which increments its
  argument by 1, and =dec=, which decrements its argument by 1.
  #+BEGIN_SRC scheme
    (define (+ a b)
      (if (= a 0)
          b
          (inc (+ (dec a) b))))

    (define (+ a b)
      (if (= a 0)
          b
          (+ (dec a) (inc b))))
  #+END_SRC
** Solution
   #+BEGIN_SRC scheme
     (inc (+ (dec 4) 5))
     (inc (+ 3 5))
     (inc (inc (+ (dec 3) 5)))
     (inc (inc (+ 2 5)))
     (inc (inc (inc (+ (dec 2) 5))))
     (inc (inc (inc (+ 1 5))))
     (inc (inc (inc (inc (+ (dec 1) 5)))))
     (inc (inc (inc (inc (+ 0 5)))))
     (inc (inc (inc (inc 5))))
     (inc (inc (inc 6)))
     (inc (inc 7))
     (inc 8)
     9

     (+ (dec 4) (inc 5))
     (+ 3 6)
     (+ (dec 3) (inc 6))
     (+ 2 7)
     (+ (dec 2) (inc 7))
     (+ 1 8)
     (+ (dec 1) (inc 8))
     (+ 0 9)
     9
   #+END_SRC
   The first process is recursive while the second process is iterative.

* Exercise 1.10
  The following procedure computes a mathematical function called Ackermann's
  function.
  #+BEGIN_SRC scheme
    (define (A x y)
      (cond ((= y 0) 0)
            ((= x 0) (* 2 y))
            ((= y 1) 2)
            (else (A (- x 1)
                     (A x (- y 1))))))
  #+END_SRC

  What are the values of the following expressions?
  #+BEGIN_SRC scheme
    (A 1 10)
    (A 2 4)
    (A 3 3)
  #+END_SRC

  Consider the following procedures, where =A= is the procedure defined above:
  #+BEGIN_SRC scheme
     (define (f n) (A 0 n))
     (define (g n) (A 1 n))
     (define (h n) (A 2 n))
     (define (k n) (* 5 n n))
  #+END_SRC

  Give concise mathematical definitions for the functions computed by the
  procedures =f=, =g=, and =h= for positive integer values of =n=. For
  example, =(k n)= computes \( 5n^2 \)

** Solution
   #+BEGIN_SRC scheme
     (A 1 10)
     (A 0 (A 1 9))
     (A 0 (A 0 (A 1 8)))
     (A 0 (A 0 (A 0 (A 1 7))))
     (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 32)))))
     (A 0 (A 0 (A 0 (A 0 64))))
     (A 0 (A 0 (A 0 128)))
     (A 0 (A 0 256))
     (A 0 512)
     1024

     (A 2 4)
     (A 1 (A 2 3))
     (A 1 (A 1 (A 2 2)))
     (A 1 (A 1 (A 1 (A 2 1))))
     (A 1 (A 1 (A 1 2)))
     (A 1 (A 1 (A 0 (A 1 1))))
     (A 1 (A 1 (A 0 2)))
     (A 1 (A 1 4))
     (A 1 (A 0 (A 1 3)))
     (A 1 (A 0 (A 0 (A 1 2))))
     (A 1 (A 0 (A 0 (A 0 (A 1 1)))))
     (A 1 (A 0 (A 0 (A 0 2))))
     (A 1 (A 0 (A 0 4)))
     (A 1 (A 0 8))
     (A 1 16)
     (A 0 (A 1 15))
     (A 0 (A 0 (A 1 14)))
     (A 0 (A 0 (A 0 (A 1 13))))
     (A 0 (A 0 (A 0 (A 0 (A 1 12)))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 11))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 10)))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 1024))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 1024))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 2048)))))
     (A 0 (A 0 (A 0 (A 0 4096))))
     (A 0 (A 0 (A 0 8192)))
     (A 0 (A 0 16384))
     (A 0 32768)
     65536

     (A 3 3)
     (A 2 (A 3 2))
     (A 2 (A 2 (A 3 1)))
     (A 2 (A 2 2))
     (A 2 (A 1 (A 2 1)))
     (A 2 (A 1 2))
     (A 2 4)
     65536
   #+END_SRC

   =(f n)= computes \( 2n \).
   =(g n)= computes \( 2^n \).
   =(h n)= computes \( ^n2 \).

* Exercise 1.11
  A function /f/ is defined by the rule that
  \begin{equation}
  f(n)=
  \begin{cases}
  n & n<3 \\ f(n-1) + 2f(n-2) + 3f(n-3) & n\geq 3
  \end{cases}
  \end{equation}
  Write a procedure that computes /f/ by means of a recursive
  procedure. Write a procedure that computes /f/ by means of an
  iterative procedure
** Solution
   #+BEGIN_SRC scheme
     (define (f-recur n)
       (if (< n 3)
           n
           (+ (f-recur (- n 1))
              (* 2 (f-recur (- n 2)))
              (* 3 (f-recur (- n 3))))))

     (define (f n)
       (define (iter count a b c)
         (if (>= count n)
             a
             (iter (+ count 1)
                   b
                   c
                   (+ (* 3 a)
                      (* 2 b)
                      c))))
       (iter 0 0 1 2))
   #+END_SRC

* Exercise 1.12
  The following pattern of numbers is called /Pascal's triangle/.

  #+BEGIN_EXAMPLE
    1
    1 1
    1 2 1
    1 3 3 1
    1 4 6 4 1
       ...
  #+END_EXAMPLE

  The numbers at the edge of the triangle are all 1, and each number
  inside the triangle is the sum of the two numbers above it. Write a
  procedure that computes elements of Pascal's triangle by means of a
  recursive process.
** Solution
   #+BEGIN_SRC scheme
     (define (pascal row column)
       (cond ((or (< column 0)
                  (> column row))
              0)
             ((or (= row 0)
                  (= column 0)
                  (= row column))
              1)
             (else
              (+ (pascal (- row 1)
                         (- column 1))
                 (pascal (- row 1)
                         column)))))
   #+END_SRC

* Exercise 1.13
  Prove that \( \text{Fib}(n) \) is the closest integer to \( \phi^n/\sqrt{5} \),
  where \( \phi = (1+\sqrt{5})/2 \). Hint: Let \( \psi = (1-\sqrt{5})/2
  \). Use induction and the definition of the Fibonacci numbers to prove
  that \( \text{Fib}(n) = (\phi^n - \psi^n)/\sqrt{5} \).

** Solution
   The formula for the nth fibonacci number is
   \begin{equation*}
   \text{Fib}(n)=
   \begin{cases}
   0 & \text{if } n = 0 \\
   1 & \text{if } n = 1 \\
   \text{Fib}(n-1)+\text{Fib}(n-2) & \text{otherwise}
   \end{cases}
   \end{equation*}
   Setting \( n=0 \), we have \( \frac{\phi^0}{\sqrt{5}} =
   \frac{1}{\sqrt{5}} \). Since \( \sqrt{5} > 2 \), we must have that \(
   \frac{1}{\sqrt{5}} < \frac{1}{2} \) and so is closer to zero than
   it is to one. Thus the claim holds for the case \( n=0 \). Similarly,
   for \( n=1 \) we have \( \frac{\phi^1}{\sqrt{5}} \approx 0.7236 \)
   which is closer to one than it is to zero as needed. For the
   inductive step, we assume that \( \text{Fib}(k) \) is the closest
   integer to \( \frac{\phi^k}{\sqrt{5}} \) and show that \( \text{Fib}(k+1) \)
   is the closest integer to \( \frac{\phi^{k+1}}{\sqrt{5}} \).
